# -*- coding: utf-8 -*-
"""Exercise_1_House_Prices_Question.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vziXO9bM6JLLN1oB4BFvmvb-urUwKU7M

在本示例中，我将建立一个模型，通过输入已有的房屋价格数据，来让模型学习房屋价格计算规则，并用来预测未知的房屋价格。先假定一个简单的房屋价格计算公式，即房屋价格按照基本价格50万，然后每间卧室50万累加，那么一间卧室的房子要100万，两间卧室的房子要150万，依此类推。

对于程序员来说，写一段这样规则的函数是非常简单的。但是想一想，怎么让电脑自己学习这个规则呢？我们一起来见证奇迹是怎么发生的吧。
"""

import tensorflow as tf
import numpy as np

xs = np.array([1, 2, 3]) # 定义一个房屋数组，分别有1间卧室，2间卧室，3间卧室
ys = np.array([100, 150, 200]) # 定义一个价格数组

# 定义网络模型
model = tf.keras.Sequential([
  # 定义网络层
  tf.keras.layers.Dense(units=1, input_shape=[1])
])

# 编译模型
model.compile(optimizer='sgd', loss='mean_squared_error')

# 训练模型
model.fit(xs, ys, epochs=300)

# 使用模型
prediction = model(np.array([5, 6, 7])).numpy().astype(np.int)

house_price_5 = prediction[0][0]
house_price_6 = prediction[1][0]
house_price_7 = prediction[2][0]

print('5间房价格：' + str(house_price_5) + '万')
print('6间房价格：' + str(house_price_6) + '万')
print('7间房价格：' + str(house_price_7) + '万')